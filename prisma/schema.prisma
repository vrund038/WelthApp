// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String          @id @default(uuid())
  clerkUserId     String          @unique 
  email           String          @unique
  name            String?
  imageUrl        String?
  transactions    Transaction[] 
  accounts        Account[]
  budgets         Budget[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt    


  @@map("users")  //means we call ours table users name from database here we rename thair name
}

model Account {
  id              String             @id @default(uuid())
  name            String             
  type            AccountType 
  balance         Decimal            @default(0) //we ask for initial balance while creating an account
  isDefault       Boolean            @default(false)
  userId          String
  user            User               @relation(fields: [userId], references: [id],onDelete: Cascade)
  transactions    Transaction[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt    



  @@index([userId])
  @@map("accounts")
}

enum AccountType {
  CURRENT
  SAVING
}


model Transaction{
  id                  String                  @id @default(uuid())
  type                TransactionType      
  amount              Decimal
  description         String?
  date                DateTime
  category            String
  receiptUrl          String?
  iSRecurring         Boolean                 @default(false)
  recurringInterval   RecurringInterval?          // Only used if iSRecurring is true
  nextRecurringDate   DateTime?                   // Next date for recurring transaction
  lastProcessed       DateTime?                   // Last time this recurring transaction was processed
  status              TransactionStatus       @default(COMPLETED)
  userId              String
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId           String
  account             Account                 @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt  
 

 @@index([userId])
 @@index([accountId])
 @@map("transactions")
}


enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}



model Budget{
  id                 String             @id @default(uuid())
  amount             Decimal            
  lastAlertSent      DateTime?          //track when last alert was sent
  userId             String             @unique
  user               User               @relation(fields: [userId],references: [id],onDelete: Cascade)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt



  @@index([userId])
  @@map("budgets") 
}